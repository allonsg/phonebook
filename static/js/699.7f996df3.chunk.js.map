{"version":3,"file":"static/js/699.7f996df3.chunk.js","mappings":"iKAoBA,IAdA,SAA4BA,EAAWC,GAKnC,OAJ8B,SAAAC,GAE1B,OADaC,EAAAA,EAAAA,IAAYC,EAAAA,KACT,SAAC,KAAQ,CAACC,GAAIJ,KAAgB,SAACD,GAAS,UAAKE,GACjE,CAEJ,C,8ICLaI,EAAe,SAAH,GAAuB,IAAjBC,EAAS,EAATA,UACrBC,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAG,eAA7BC,EAAI,KAAEC,EAAO,KACpB,GAA0BF,EAAAA,EAAAA,UAAS,IAAG,eAA/BG,EAAK,KAAEC,EAAQ,KACtB,GAAgCJ,EAAAA,EAAAA,UAAS,IAAG,eAArCK,EAAQ,KAAEC,EAAW,KAC5B,GAA8CN,EAAAA,EAAAA,WAAS,GAAM,eAAtDO,EAAe,KAAEC,EAAkB,KAC1C,GAAwCR,EAAAA,EAAAA,WAAS,GAAM,eAAhDS,EAAY,KAAEC,EAAe,KAG9BC,EAAe,SAAH,GAA+C,IAAD,IAAxCC,OAAUX,EAAI,EAAJA,KAAMY,EAAK,EAALA,MAAOC,EAAQ,EAARA,SAoB3C,OAlBa,aAATb,IACIa,EAASC,MACTP,GAAmB,GAGnBA,GAAmB,IAId,UAATP,IACIa,EAASC,MACTL,GAAgB,GAGhBA,GAAgB,IAIhBT,GACJ,IAAK,QACD,OAAOG,EAASS,GACpB,IAAK,WACD,OAAOP,EAAYO,GACvB,IAAK,OACD,OAAOX,EAAQW,GACnB,QACI,OAEZ,EA0BMG,EAAanB,IAAcY,IAAiBF,IAAoBN,EAGtE,OACI,UAAC,KAAQ,YACL,UAAC,KAAU,YACP,SAAC,KAAS,IAAG,cAGjB,UAAC,KAAI,CAACgB,SAjCO,SAAAC,GACjBA,EAAEC,iBAEF,IAAMC,EAAW,CACbnB,KAAAA,EACAE,MAAAA,EACAE,SAAAA,GAGJP,GAASuB,EAAAA,EAAAA,IAAOD,IAAWE,SACtBC,MAAK,kBACFC,EAAAA,GAAAA,QAAc,iCACV,CACIC,SAAUD,EAAAA,GAAAA,SAAAA,WAEjB,IACJE,OAAM,kBACHF,EAAAA,GAAAA,MAAY,sEACR,CACIC,SAAUD,EAAAA,GAAAA,SAAAA,WAEjB,GACb,EAWsCG,aAAa,MAAK,WAC5C,UAAC,KAAO,YACJ,SAAC,KAAK,CAACC,KAAK,OAAO3B,KAAK,OAAOY,MAAOZ,EAAM4B,SAAUlB,EAAemB,UAAU,KAC/E,SAAC,KAAK,yBAEV,UAAC,KAAO,YACJ,SAAC,KAAK,CAACF,KAAK,QAAQ3B,KAAK,QAAQY,MAAOV,EAAO0B,SAAUlB,EAAcmB,UAAU,KACjF,SAAC,KAAK,CAACC,OAAQ5B,EAAM,yBAEzB,UAAC,KAAO,YACJ,SAAC,KAAK,CAACyB,KAAK,WAAWI,MAAM,6GAA6GC,QAAQ,uCAAsChC,KAAK,WAAWY,MAAOR,EAAUwB,SAAUlB,EAAcuB,IAAK,EAAGC,IAAK,GAAIL,UAAU,KAC5Q,SAAC,KAAK,CAACC,OAAQ1B,EAAS,4BAG5B,UAAC,KAAM,CAACuB,KAAK,SAASQ,SAAUpB,EAAW,oBAAO,SAAC,KAAc,CAACoB,SAAWpB,YAI7F,E,oBC7EA,GAAeqB,EAAAA,EAAAA,IAfM,WACjB,IAAMxC,GAAYJ,EAAAA,EAAAA,IAAY6C,EAAAA,IAE9B,OAAQ,iCACJ,SAAC,KAAM,WACP,+CAEA,SAAC,KAAS,WACN,SAAC1C,EAAY,CAACC,UAAWA,QAIrC,GAGgD,Y","sources":["HOC/WithNoAuthRedurect.jsx","components/RegisterForm/RegisterForm.jsx","views/RegisterView/RegisterView.jsx"],"sourcesContent":["import { getUser } from \"redux/userSlice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nfunction WithNoAuthRedirect(Component, navigateTo){\r\n    const ComponentWithRedirect = props => {\r\n        const user = useSelector(getUser);\r\n        return !!user ? <Navigate to={navigateTo}/> : <Component {...props} /> \r\n    }\r\n    return ComponentWithRedirect;\r\n}\r\n\r\nWithNoAuthRedirect.propTypes = {\r\n    navigateTo: PropTypes.string.isRequired,\r\n    Component: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nexport default WithNoAuthRedirect;\r\n","import { signUp } from \"redux/userSlice\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Form, Label, Button, Input, LoginBox, FormHeader, UserBox, AnimatedBorder, LoginIcon} from \"common/formStyles/formStyles\";\r\nimport PropTypes from 'prop-types';\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport const RegisterForm = ({ isLoading }) => {\r\n    const dispatch = useDispatch();\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [passwordIsValid, setPasswordIsValid] = useState(false);\r\n    const [emailIsValid, setEmailIsValid] = useState(false);\r\n    \r\n\r\n    const handleChange = ({ target: { name, value, validity } }) => {\r\n        \r\n        if (name === 'password') {\r\n            if (validity.valid) {\r\n                setPasswordIsValid(true);\r\n            }\r\n            else {\r\n                setPasswordIsValid(false);\r\n            }\r\n        }\r\n\r\n        if (name === 'email') {\r\n            if (validity.valid) {\r\n                setEmailIsValid(true);\r\n            }\r\n            else {\r\n                setEmailIsValid(false);\r\n            }\r\n        }\r\n        \r\n        switch (name) {\r\n            case 'email':\r\n                return setEmail(value);\r\n            case 'password':\r\n                return setPassword(value);\r\n            case 'name':\r\n                return setName(value);\r\n            default:\r\n                return;\r\n        };\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n            \r\n        const formData = {\r\n            name,\r\n            email,\r\n            password,\r\n        }\r\n\r\n        dispatch(signUp(formData)).unwrap()\r\n            .then(() =>\r\n                toast.success('You are successfully logged in',\r\n                    {\r\n                        position: toast.POSITION.TOP_RIGHT\r\n                    }\r\n                ))\r\n            .catch(() =>\r\n                toast.error('Something went wrong...Try reloading the page and enter valid email',\r\n                    {\r\n                        position: toast.POSITION.TOP_RIGHT,\r\n                    }\r\n                ));\r\n    }\r\n\r\n    const validation = isLoading || !emailIsValid || !passwordIsValid || !name;\r\n\r\n\r\n    return (\r\n        <LoginBox>\r\n            <FormHeader>\r\n                <LoginIcon />\r\n                Sign Up\r\n            </FormHeader>\r\n            <Form onSubmit={handleSubmit} autoComplete='off'>\r\n                <UserBox>\r\n                    <Input type='text' name='name' value={name} onChange={handleChange}  required={true} />\r\n                    <Label> Name </Label>\r\n                </UserBox>\r\n                <UserBox>\r\n                    <Input type='email' name='email' value={email} onChange={handleChange} required={true} />\r\n                    <Label text={!!email}> Email </Label>\r\n                </UserBox>\r\n                <UserBox>\r\n                    <Input type='password' title=\"Must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters\" pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\" name='password' value={password} onChange={handleChange} min={8} max={21} required={true} />\r\n                    <Label text={!!password}> Password </Label>\r\n                </UserBox>\r\n\r\n                <Button type=\"submit\" disabled={validation}>SignUp<AnimatedBorder disabled ={validation}></AnimatedBorder></Button>\r\n            </Form>\r\n        </LoginBox>\r\n    )\r\n}\r\n\r\nRegisterForm.propTypes = {\r\n  isLoading: PropTypes.bool.isRequired,\r\n};","import { useSelector } from \"react-redux\";\r\nimport {getIsLoading } from \"redux/userSlice\";\r\nimport { RegisterForm } from \"components/RegisterForm/RegisterForm\";\r\nimport WithNoAuthRedirect from \"HOC/WithNoAuthRedurect\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { FormBlock } from \"common/formStyles/formStyles\";\r\n\r\nconst RegisterView = () => {\r\n    const isLoading = useSelector(getIsLoading);\r\n\r\n    return (<>\r\n        <Helmet>\r\n        <title>Registration</title>\r\n        </Helmet>\r\n        <FormBlock>\r\n            <RegisterForm isLoading={isLoading} />\r\n        </FormBlock>\r\n    </>\r\n    );\r\n}\r\n\r\n\r\nexport default WithNoAuthRedirect(RegisterView, '/contacts');"],"names":["Component","navigateTo","props","useSelector","getUser","to","RegisterForm","isLoading","dispatch","useDispatch","useState","name","setName","email","setEmail","password","setPassword","passwordIsValid","setPasswordIsValid","emailIsValid","setEmailIsValid","handleChange","target","value","validity","valid","validation","onSubmit","e","preventDefault","formData","signUp","unwrap","then","toast","position","catch","autoComplete","type","onChange","required","text","title","pattern","min","max","disabled","WithNoAuthRedirect","getIsLoading"],"sourceRoot":""}
{"version":3,"file":"static/js/558.5076387e.chunk.js","mappings":"iKAoBA,IAdA,SAA4BA,EAAWC,GAKnC,OAJ8B,SAAAC,GAE1B,OADaC,EAAAA,EAAAA,IAAYC,EAAAA,KACT,SAAC,KAAQ,CAACC,GAAIJ,KAAgB,SAACD,GAAS,UAAKE,GACjE,CAEJ,C,8ICHaI,EAAY,SAAH,GAAuB,IAAjBC,EAAS,EAATA,UAClBC,GAAWC,EAAAA,EAAAA,MACjB,GAA0BC,EAAAA,EAAAA,UAAS,IAAG,eAA/BC,EAAK,KAAEC,EAAQ,KACtB,GAAgCF,EAAAA,EAAAA,UAAS,IAAG,eAArCG,EAAQ,KAAEC,EAAW,KAC5B,GAA8CJ,EAAAA,EAAAA,WAAS,GAAM,eAAtDK,EAAe,KAAEC,EAAkB,KAC1C,GAAwCN,EAAAA,EAAAA,WAAS,GAAM,eAAhDO,EAAY,KAAEC,EAAe,KAE9BC,EAAe,SAAH,GAA+C,IAAD,IAAxCC,OAAUC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAAOC,EAAQ,EAARA,SAmB3C,OAjBa,aAATF,IACKE,EAASC,MACdR,GAAmB,GAGfA,GAAmB,IAGb,UAATK,IACGE,EAASC,MACbN,GAAgB,GAGZA,GAAgB,IAIhBG,GACJ,IAAK,QACD,OAAOT,EAASU,GACpB,IAAK,WACD,OAAOR,EAAYQ,GACvB,QACI,OAEZ,EAwBMG,EAAalB,IAAcU,IAAiBF,EAElD,OAAQ,UAAC,KAAQ,YACb,UAAC,KAAU,YACP,SAAC,KAAS,IAAE,aAGhB,UAAC,KAAI,CAACW,SA5BW,SAAAC,GACjBA,EAAEC,iBACF,IAAMC,EAAW,CACblB,MAAAA,EACAE,SAAAA,GAEJL,GAASsB,EAAAA,EAAAA,IAAMD,IAAWE,SACrBC,MAAK,kBACFC,EAAAA,GAAAA,QAAc,iCACV,CACIC,SAAUD,EAAAA,GAAAA,SAAAA,WAEjB,IACJE,OAAM,kBACHF,EAAAA,GAAAA,MAAY,gFACR,CACIC,SAAUD,EAAAA,GAAAA,SAAAA,WAEjB,GACb,EASkCG,aAAa,MAAK,WAC5C,UAAC,KAAO,YACA,SAAC,KAAK,CAACC,KAAK,QAAQhB,KAAK,QAAQC,MAAOX,EAAO2B,SAAUnB,EAAcoB,UAAU,KACrF,SAAC,KAAK,CAACC,OAAQ7B,EAAM,uBAEzB,UAAC,KAAO,YACA,SAAC,KAAK,CAAC0B,KAAK,WAAWhB,KAAK,WAAWC,MAAOT,EAAU4B,MAAM,6GAA6GC,QAAQ,uCAAsCJ,SAAUnB,EAAcwB,IAAK,EAAGC,IAAK,GAAIL,UAAU,KAChR,SAAC,KAAK,CAACC,OAAQ3B,EAAS,0BAExB,UAAC,KAAM,CAACwB,KAAK,SAASQ,SAAUpB,EAAW,mBAAM,SAAC,KAAc,CAACoB,SAAWpB,YAI5F,E,oBCjEA,GAAeqB,EAAAA,EAAAA,IAdG,WACd,IAAMvC,GAAYJ,EAAAA,EAAAA,IAAY4C,EAAAA,IAC9B,OACI,iCACA,SAAC,KAAM,WACP,gDAEI,SAAC,KAAS,WACV,SAACzC,EAAS,CAACC,UAAWA,QAIlC,GAE6C,Y","sources":["HOC/WithNoAuthRedurect.jsx","components/LoginForm/LoginForm.jsx","views/LoginView/LoginView.jsx"],"sourcesContent":["import { getUser } from \"redux/userSlice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nfunction WithNoAuthRedirect(Component, navigateTo){\r\n    const ComponentWithRedirect = props => {\r\n        const user = useSelector(getUser);\r\n        return !!user ? <Navigate to={navigateTo}/> : <Component {...props} /> \r\n    }\r\n    return ComponentWithRedirect;\r\n}\r\n\r\nWithNoAuthRedirect.propTypes = {\r\n    navigateTo: PropTypes.string.isRequired,\r\n    Component: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nexport default WithNoAuthRedirect;\r\n","import { login } from \"redux/userSlice\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { AnimatedBorder, Button, Form, FormHeader, Input, Label, LoginBox, LoginIcon, UserBox } from \"common/formStyles/formStyles\"\r\nimport { toast } from \"react-toastify\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nexport const LoginForm = ({ isLoading }) => {\r\n    const dispatch = useDispatch();\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [passwordIsValid, setPasswordIsValid] = useState(false);\r\n    const [emailIsValid, setEmailIsValid] = useState(false);\r\n    \r\n    const handleChange = ({ target: { name, value, validity } }) => {\r\n\r\n        if (name === 'password') {\r\n             if (validity.valid) {\r\n            setPasswordIsValid(true);\r\n            }\r\n             else {\r\n                setPasswordIsValid(false);\r\n            }\r\n        }\r\n         if (name === 'email') {\r\n            if (validity.valid) {\r\n            setEmailIsValid(true);\r\n            }\r\n            else {\r\n                setEmailIsValid(false);\r\n            }\r\n        }\r\n        \r\n        switch (name) {\r\n            case 'email':\r\n                return setEmail(value);\r\n            case 'password':\r\n                return setPassword(value);\r\n            default:\r\n                return;\r\n        };\r\n    };\r\n\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        const formData = {\r\n            email,\r\n            password,\r\n        }\r\n        dispatch(login(formData)).unwrap()\r\n            .then(() =>\r\n                toast.success('You are successfully logged in',\r\n                    {\r\n                        position: toast.POSITION.TOP_RIGHT\r\n                    }\r\n                ))\r\n            .catch(() =>\r\n                toast.error('Something went wrong...Try reloading the page and enter valid email, password',\r\n                    {\r\n                        position: toast.POSITION.TOP_RIGHT,\r\n                    }\r\n                ))\r\n    };\r\n\r\n    const validation = isLoading || !emailIsValid || !passwordIsValid;\r\n\r\n    return (<LoginBox>\r\n        <FormHeader>\r\n            <LoginIcon/>\r\n            Log In\r\n        </FormHeader>\r\n        <Form onSubmit={handleSubmit} autoComplete='off'>\r\n            <UserBox>\r\n                    <Input type=\"email\" name='email' value={email} onChange={handleChange} required={true}/>\r\n                <Label text={!!email}>Email</Label>\r\n            </UserBox>\r\n            <UserBox>\r\n                    <Input type=\"password\" name='password' value={password} title=\"Must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters\" pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\" onChange={handleChange} min={8} max={21} required={true}/>\r\n                <Label text={!!password}>Password</Label>\r\n            </UserBox>\r\n                <Button type=\"submit\" disabled={validation}>LogIn<AnimatedBorder disabled ={validation}></AnimatedBorder></Button>\r\n            </Form>\r\n  </LoginBox>\r\n  )\r\n}\r\n\r\nLoginForm.propTypes = {\r\n  isLoading: PropTypes.bool.isRequired,\r\n};","import { LoginForm } from \"components/LoginForm/LoginForm\";\r\nimport {getIsLoading} from \"redux/userSlice\";\r\nimport WithNoAuthRedirect from \"HOC/WithNoAuthRedurect\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { FormBlock } from \"common/formStyles/formStyles\";\r\n\r\n\r\nconst LoginView = () => {\r\n    const isLoading = useSelector(getIsLoading);\r\n    return (\r\n        <>\r\n        <Helmet>\r\n        <title>Authorization</title>\r\n            </Helmet>\r\n            <FormBlock>\r\n            <LoginForm isLoading={isLoading}/>\r\n            </FormBlock>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default WithNoAuthRedirect(LoginView, '/contacts');\r\n"],"names":["Component","navigateTo","props","useSelector","getUser","to","LoginForm","isLoading","dispatch","useDispatch","useState","email","setEmail","password","setPassword","passwordIsValid","setPasswordIsValid","emailIsValid","setEmailIsValid","handleChange","target","name","value","validity","valid","validation","onSubmit","e","preventDefault","formData","login","unwrap","then","toast","position","catch","autoComplete","type","onChange","required","text","title","pattern","min","max","disabled","WithNoAuthRedirect","getIsLoading"],"sourceRoot":""}
{"version":3,"file":"static/js/62.0a47c027.chunk.js","mappings":"+JAoBA,IAdA,SAA4BA,EAAWC,GAKnC,OAJ8B,SAAAC,GAE1B,OADaC,EAAAA,EAAAA,IAAYC,EAAAA,KACT,SAAC,KAAQ,CAACC,GAAIJ,KAAgB,SAACD,GAAS,UAAKE,GACjE,CAEJ,C,6ICVaI,EAAOC,EAAAA,GAAAA,KAAW,2GAOlBC,EAAQD,EAAAA,GAAAA,MAAY,kHAKtB,SAAAL,GAAK,OAAKA,EAAMO,gBAAkB,MAAQ,OAAO,IAG/CC,EAASH,EAAAA,GAAAA,OAAa,4VAmBtBI,EAAQJ,EAAAA,GAAAA,MAAY,mL,SC7BpBK,EAAY,SAAH,GAAuB,IAAjBC,EAAS,EAATA,UAClBC,GAAWC,EAAAA,EAAAA,MACjB,GAA0BC,EAAAA,EAAAA,UAAS,IAAG,eAA/BC,EAAK,KAAEC,EAAQ,KACtB,GAAgCF,EAAAA,EAAAA,UAAS,IAAG,eAArCG,EAAQ,KAAEC,EAAW,KAC5B,GAA8CJ,EAAAA,EAAAA,WAAS,GAAM,eAAtDP,EAAe,KAAEY,EAAkB,KAEpCC,EAAe,SAAH,GAAqC,IAAD,IAA9BC,OAAUC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAWpC,OATc,aAATD,IACIC,EAAMC,MAAM,uCAIbL,GAAmB,GAHvBA,GAAmB,IAOfG,GACJ,IAAK,QACD,OAAON,EAASO,GACpB,IAAK,WACD,OAAOL,EAAYK,GACvB,QACI,OAEZ,EAqBME,EAAOR,EAASS,OAAS,EAEjC,OACE,UAACtB,EAAI,CAACuB,SAde,SAAAC,GACjBA,EAAEC,iBACG,IAAMC,EAAW,CAClBf,MAAAA,EACAE,SAAAA,GAEJL,GAASmB,EAAAA,EAAAA,IAAMD,IACfd,EAAS,IACTE,EAAY,GAChB,EAK8Bc,aAAa,MAAK,WACpC,UAAC1B,EAAK,oBACF,SAACG,EAAK,CAACwB,KAAK,QAAQX,KAAK,QAAQC,MAAOR,EAAOmB,YAAY,oBAAoBC,SAAUf,EAAcgB,UAAU,QAErH,UAAC9B,EAAK,CAACC,gBAAiBA,EAAgB,sBACpC,SAACE,EAAK,CAACwB,KAAK,WAAWX,KAAK,WAAWC,MAAON,EAAUoB,MAAM,6GAA6GC,QAAQ,uCAAsCH,SAAUf,EAAcmB,QA3B7O,SAAAX,GACZA,EAAEP,OAAOE,MAAMG,OAAS,GAAKE,EAAEP,OAAOE,MAAMG,QAAU,EACtDP,GAAmB,GAEnBA,GAAmB,EAE3B,EAqBuRqB,OAAQ,kBAAKrB,GAAmB,EAAM,EAAEsB,IAAK,EAAGC,IAAK,GAAIR,YAAY,sBAAsBE,UAAU,QAEhX,SAAC5B,EAAM,CAACyB,KAAK,SAASU,SAAUhC,IAAcI,GAASU,EAAK,qBAG5E,E,UChEamB,EAAOvC,EAAAA,GAAAA,IAAU,6LCe9B,GAAewC,EAAAA,EAAAA,IAVG,WACd,IAAMlC,GAAYV,EAAAA,EAAAA,IAAY6C,EAAAA,IAC9B,OACI,UAACF,EAAI,YACD,wCACA,SAAClC,EAAS,CAACC,UAAWA,MAGlC,GAE6C,Y","sources":["HOC/WithNoAuthRedurect.jsx","components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.jsx","views/LoginView/LoginView.styled.js","views/LoginView/LoginView.jsx"],"sourcesContent":["import { getUser } from \"redux/userSlice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nfunction WithNoAuthRedirect(Component, navigateTo){\r\n    const ComponentWithRedirect = props => {\r\n        const user = useSelector(getUser);\r\n        return !!user ? <Navigate to={navigateTo}/> : <Component {...props} /> \r\n    }\r\n    return ComponentWithRedirect;\r\n}\r\n\r\nWithNoAuthRedirect.propTypes = {\r\n    navigateTo: PropTypes.string.isRequired,\r\n    Component: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nexport default WithNoAuthRedirect;\r\n","import styled from 'styled-components';\r\n\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  gap: 10px;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  display: block;\r\n  height: 66px;\r\n  font-weight: bold;\r\n  width: 300px;\r\n  color: ${props => (props.passwordInvalid ? 'red' : 'black')};\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: gray;\r\n  border: none;\r\n  border-radius: 4px;\r\n  color: white;\r\n  font-size: 18px;\r\n  cursor: pointer;\r\n\r\n  &:disabled {\r\n    cursor: default;\r\n    border: 1px solid #999999;\r\n    background-color: #cccccc;\r\n    color: #666666;\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  width: 100%;\r\n  padding: 12px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  box-sizing: border-box;\r\n  margin-top: 6px;\r\n  margin-bottom: 16px;\r\n`;\r\n","import { login } from \"redux/userSlice\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Button, Form, Input, Label } from \"./LoginForm.styled\"\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const LoginForm = ({ isLoading }) => {\r\n    const dispatch = useDispatch();\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [passwordInvalid, setPasswordInvalid] = useState(false);\r\n\r\n    const handleChange = ({ target: { name, value } }) => {\r\n\r\n         if (name === 'password') {\r\n            if (!value.match(/(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}/)) {\r\n            setPasswordInvalid(true);\r\n            }\r\n            else {\r\n                setPasswordInvalid(false);\r\n            }\r\n        }\r\n        \r\n        switch (name) {\r\n            case 'email':\r\n                return setEmail(value);\r\n            case 'password':\r\n                return setPassword(value);\r\n            default:\r\n                return;\r\n        };\r\n    };\r\n\r\n    const onPassFocus = e => {\r\n        if (e.target.value.length < 8 && e.target.value.length >= 1) {\r\n            setPasswordInvalid(true);\r\n        } else {\r\n            setPasswordInvalid(false);\r\n        }\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n             const formData = {\r\n            email,\r\n            password,\r\n        }\r\n        dispatch(login(formData));\r\n        setEmail('');\r\n        setPassword('');\r\n    };\r\n\r\n    const pass = password.length < 8;\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit} autoComplete='off'>\r\n                <Label>Email\r\n                    <Input type=\"email\" name='email' value={email} placeholder='example@gmail.com' onChange={handleChange} required={true}/>\r\n                </Label>\r\n                <Label passwordInvalid={passwordInvalid}>Password\r\n                    <Input type=\"password\" name='password' value={password} title=\"Must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters\" pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\" onChange={handleChange} onFocus={onPassFocus} onBlur={()=> setPasswordInvalid(false)} min={8} max={21} placeholder='Enter min 8 symbols' required={true}/>\r\n                </Label>\r\n                <Button type=\"submit\" disabled={isLoading || !email || pass}>LogIn</Button>\r\n            </Form>\r\n  )\r\n}\r\n\r\nLoginForm.propTypes = {\r\n  isLoading: PropTypes.bool.isRequired,\r\n};","import styled from 'styled-components';\r\n\r\nexport const Wrap = styled.div`\r\n  display: flex;\r\n  gap: 20px;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin: 0 auto;\r\n  width: 500px;\r\n  padding: 20px;\r\n  border: 1px solid black;\r\n`;\r\n","import { LoginForm } from \"components/LoginForm/LoginForm\";\r\nimport {getIsLoading} from \"redux/userSlice\";\r\nimport WithNoAuthRedirect from \"HOC/WithNoAuthRedurect\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Wrap } from \"./LoginView.styled\";\r\n\r\n\r\nconst LoginView = () => {\r\n    const isLoading = useSelector(getIsLoading);\r\n    return (\r\n        <Wrap>\r\n            <h1>Login Page</h1>\r\n            <LoginForm isLoading={isLoading}/>\r\n        </Wrap>\r\n    );\r\n}\r\n\r\nexport default WithNoAuthRedirect(LoginView, '/contacts');\r\n"],"names":["Component","navigateTo","props","useSelector","getUser","to","Form","styled","Label","passwordInvalid","Button","Input","LoginForm","isLoading","dispatch","useDispatch","useState","email","setEmail","password","setPassword","setPasswordInvalid","handleChange","target","name","value","match","pass","length","onSubmit","e","preventDefault","formData","login","autoComplete","type","placeholder","onChange","required","title","pattern","onFocus","onBlur","min","max","disabled","Wrap","WithNoAuthRedirect","getIsLoading"],"sourceRoot":""}
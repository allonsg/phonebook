{"version":3,"file":"static/js/441.7000bf6e.chunk.js","mappings":"gKAoBA,IAdA,SAA4BA,EAAWC,GAKnC,OAJ8B,SAAAC,GAE1B,OADaC,EAAAA,EAAAA,IAAYC,EAAAA,KACT,SAAC,KAAQ,CAACC,GAAIJ,KAAgB,SAACD,GAAS,UAAKE,GACjE,CAEJ,C,+ICVaI,EAAOC,EAAAA,GAAAA,KAAW,2GAOlBC,EAAQD,EAAAA,GAAAA,MAAY,kHAKtB,SAAAL,GAAK,OAAKA,EAAMO,gBAAkB,MAAQ,OAAO,IAG/CC,EAASH,EAAAA,GAAAA,OAAa,4VAmBtBI,EAAQJ,EAAAA,GAAAA,MAAY,mL,SC9BpBK,EAAe,SAAH,GAAuB,IAAjBC,EAAS,EAATA,UACrBC,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAG,eAA7BC,EAAI,KAAEC,EAAO,KACpB,GAA0BF,EAAAA,EAAAA,UAAS,IAAG,eAA/BG,EAAK,KAAEC,EAAQ,KACtB,GAAgCJ,EAAAA,EAAAA,UAAS,IAAG,eAArCK,EAAQ,KAAEC,EAAW,KAC5B,GAA8CN,EAAAA,EAAAA,WAAS,GAAM,eAAtDP,EAAe,KAAEc,EAAkB,KAGpCC,EAAe,SAAH,GAAqC,IAAD,IAA9BC,OAAUR,EAAI,EAAJA,KAAMS,EAAK,EAALA,MAWpC,OATa,aAATT,IACKS,EAAMC,MAAM,uCAIbJ,GAAmB,GAHvBA,GAAmB,IAOfN,GACJ,IAAK,QACD,OAAOG,EAASM,GACpB,IAAK,WACD,OAAOJ,EAAYI,GACvB,IAAK,OACD,OAAOR,EAAQQ,GACnB,QACI,OAEZ,EA0BME,EAAOP,EAASQ,OAAS,EAE/B,OACI,+BACI,UAACvB,EAAI,CAACwB,SApBO,SAAAC,GACjBA,EAAEC,iBAEF,IAAMC,EAAW,CACbhB,KAAAA,EACAE,MAAAA,EACAE,SAAAA,GAGJP,GAASoB,EAAAA,EAAAA,IAAOD,IAEhBf,EAAQ,IACRE,EAAS,IACTE,EAAY,GAChB,EAMsCa,aAAa,MAAK,WAC5C,UAAC3B,EAAK,qBAAO,SAACG,EAAK,CAACyB,KAAK,OAAOnB,KAAK,OAAOS,MAAOT,EAAMoB,SAAUb,EAAcc,YAAY,OAAOC,UAAU,QAC9G,UAAC/B,EAAK,sBAAQ,SAACG,EAAK,CAACyB,KAAK,QAAQnB,KAAK,QAAQS,MAAOP,EAAOkB,SAAUb,EAAcc,YAAY,oBAAoBC,UAAU,QAC/H,UAAC/B,EAAK,CAACC,gBAAiBA,EAAgB,wBAAW,SAACE,EAAK,CAACyB,KAAK,WAAWI,MAAM,6GAA6GC,QAAQ,uCAAsCxB,KAAK,WAAWS,MAAOL,EAAUqB,QA/BpQ,SAAAX,GACZA,EAAEN,OAAOC,MAAMG,OAAS,GAAKE,EAAEN,OAAOC,MAAMG,QAAU,EACtDN,GAAmB,GAEnBA,GAAmB,EAE3B,EAyB8SoB,OAAQ,kBAAKpB,GAAmB,EAAM,EAAEc,SAAUb,EAAcoB,IAAK,EAAGC,IAAK,GAAIP,YAAY,sBAAsBC,UAAU,QAC/Z,SAAC7B,EAAM,CAAC0B,KAAK,SAASU,SAAUjC,IAAcI,IAASE,GAASS,EAAK,0BAIrF,E,UCvEamB,EAAQxC,EAAAA,GAAAA,GAAS,kEAKjByC,EAAOzC,EAAAA,GAAAA,IAAU,6LCW9B,GAAe0C,EAAAA,EAAAA,IAZM,WACjB,IAAMpC,GAAYV,EAAAA,EAAAA,IAAY+C,EAAAA,IAE9B,OACI,UAACF,EAAI,YACD,SAACD,EAAK,6BACN,SAACnC,EAAY,CAACC,UAAWA,MAGrC,GAGgD,Y","sources":["HOC/WithNoAuthRedurect.jsx","components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.jsx","views/RegisterView/RegisterView.styled.js","views/RegisterView/RegisterView.jsx"],"sourcesContent":["import { getUser } from \"redux/userSlice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nfunction WithNoAuthRedirect(Component, navigateTo){\r\n    const ComponentWithRedirect = props => {\r\n        const user = useSelector(getUser);\r\n        return !!user ? <Navigate to={navigateTo}/> : <Component {...props} /> \r\n    }\r\n    return ComponentWithRedirect;\r\n}\r\n\r\nWithNoAuthRedirect.propTypes = {\r\n    navigateTo: PropTypes.string.isRequired,\r\n    Component: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nexport default WithNoAuthRedirect;\r\n","import styled from 'styled-components';\r\n\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  gap: 10px;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  display: block;\r\n  height: 66px;\r\n  font-weight: bold;\r\n  width: 300px;\r\n  color: ${props => (props.passwordInvalid ? 'red' : 'black')};\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: gray;\r\n  border: none;\r\n  border-radius: 4px;\r\n  color: white;\r\n  font-size: 18px;\r\n  cursor: pointer;\r\n\r\n  &:disabled {\r\n    cursor: default;\r\n    border: 1px solid #999999;\r\n    background-color: #cccccc;\r\n    color: #666666;\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  width: 100%;\r\n  padding: 12px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  box-sizing: border-box;\r\n  margin-top: 6px;\r\n  margin-bottom: 16px;\r\n`;\r\n","import { signUp } from \"redux/userSlice\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Form, Label, Button, Input, StyledAlert, Message, Letter, Capital, Number, Length } from \"./RegisterForm.styled\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const RegisterForm = ({ isLoading }) => {\r\n    const dispatch = useDispatch();\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [passwordInvalid, setPasswordInvalid] = useState(false);\r\n    \r\n\r\n    const handleChange = ({ target: { name, value } }) => {   \r\n        \r\n        if (name === 'password') {\r\n            if (!value.match(/(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}/)) {\r\n            setPasswordInvalid(true);\r\n            }\r\n            else {\r\n                setPasswordInvalid(false);\r\n            }\r\n        }\r\n        \r\n        switch (name) {\r\n            case 'email':\r\n                return setEmail(value);\r\n            case 'password':\r\n                return setPassword(value);\r\n            case 'name':\r\n                return setName(value);\r\n            default:\r\n                return;\r\n        };\r\n    };\r\n\r\n    const onPassFocus = e => {\r\n        if (e.target.value.length < 8 && e.target.value.length >= 1) {\r\n            setPasswordInvalid(true);\r\n        } else {\r\n            setPasswordInvalid(false);\r\n        }\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n            \r\n        const formData = {\r\n            name,\r\n            email,\r\n            password,\r\n        }\r\n\r\n        dispatch(signUp(formData));\r\n\r\n        setName('');\r\n        setEmail('');\r\n        setPassword('');\r\n    };\r\n\r\n    const pass = password.length < 8;\r\n\r\n    return (\r\n        <>\r\n            <Form onSubmit={handleSubmit} autoComplete='off'>\r\n                <Label> Name <Input type='text' name='name' value={name} onChange={handleChange} placeholder='Adam' required={true}/></Label>\r\n                <Label> Email <Input type='email' name='email' value={email} onChange={handleChange} placeholder='example@gmail.com' required={true}/></Label>\r\n                <Label passwordInvalid={passwordInvalid}> Password <Input type='password' title=\"Must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters\" pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\" name='password' value={password} onFocus={onPassFocus} onBlur={()=> setPasswordInvalid(false)} onChange={handleChange} min={8} max={21} placeholder='Enter min 8 symbols' required={true}/></Label>\r\n                <Button type=\"submit\" disabled={isLoading || !name || !email || pass}>Register</Button>\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nRegisterForm.propTypes = {\r\n  isLoading: PropTypes.bool.isRequired,\r\n};","import styled from 'styled-components';\r\n\r\nexport const Title = styled.h1`\r\n  // padding: 20px;\r\n  margin-bottom: 0;\r\n`;\r\n\r\nexport const Wrap = styled.div`\r\n  display: flex;\r\n  gap: 20px;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin: 0 auto;\r\n  width: 500px;\r\n  padding: 20px;\r\n  border: 1px solid black;\r\n`;\r\n","import { useSelector } from \"react-redux\";\r\nimport {getIsLoading } from \"redux/userSlice\";\r\nimport { RegisterForm } from \"components/RegisterForm/RegisterForm\";\r\nimport WithNoAuthRedirect from \"HOC/WithNoAuthRedurect\";\r\nimport { Title, Wrap } from \"./RegisterView.styled\";\r\n\r\nconst RegisterView = () => {\r\n    const isLoading = useSelector(getIsLoading);\r\n\r\n    return (\r\n        <Wrap>\r\n            <Title>Register Page</Title>\r\n            <RegisterForm isLoading={isLoading} />\r\n        </Wrap>\r\n    );\r\n}\r\n\r\n\r\nexport default WithNoAuthRedirect(RegisterView, '/contacts');"],"names":["Component","navigateTo","props","useSelector","getUser","to","Form","styled","Label","passwordInvalid","Button","Input","RegisterForm","isLoading","dispatch","useDispatch","useState","name","setName","email","setEmail","password","setPassword","setPasswordInvalid","handleChange","target","value","match","pass","length","onSubmit","e","preventDefault","formData","signUp","autoComplete","type","onChange","placeholder","required","title","pattern","onFocus","onBlur","min","max","disabled","Title","Wrap","WithNoAuthRedirect","getIsLoading"],"sourceRoot":""}